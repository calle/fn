var sys = require('sys');

/*
 * External interface
 */

var TRACE = exports.TRACE = { name:'TRACE', value:1 },
    DEBUG = exports.DEBUG = { name:'DEBUG', value:2 },
    INFO  = exports.INFO  = { name:'INFO',  value:3 },
    WARN  = exports.WARN  = { name:'WARN',  value:4 },
    ERROR = exports.ERROR = { name:'ERROR', value:5 };

/**
 * Create a Logger instance
 */
var logger = exports.logger = function(name, parent) {
  if (!(name in loggers)) {
    loggers[name] = new Logger(name, parent || Root)
  }
  return loggers[name];
}

var Logger = function(name, parent) {
  this.name = name;
  this.parent = parent;
  this.level_ = undefined;
  this.appenders_ = undefined;
}

Logger.prototype = {

  get appenders() {
    return this.appenders_ || this.parent.appenders;
  },

  get level() {
    return this.level_ || this.parent.level;
  },

  trace: function() {
    if (this.level.value <= TRACE.value) log(this, TRACE, arguments);
  },

  debug: function() {
    if (this.level.value <= DEBUG.value) log(this, DEBUG, arguments);
  },

  info: function() {
    if (this.level.value <= INFO.value) log(this, INFO, arguments);
  },

  warn: function() {
    if (this.level.value <= WARN.value) log(this, WARN, arguments);
  },

  error: function() {
    if (this.level.value <= ERROR.value) log(this, ERROR, arguments);
  },

  addPrefix: function() {
    var prefixArgs = Array.prototype.slice.call(arguments, 0),
        prefixFormat = prefixArgs.shift(),
        logger = new Logger(this.name, this);
    logger.prefix = {
      format: prefixFormat,
      args: prefixArgs
    }
    return logger;
  },

  setParent: function(parent) {
    this.parent = parent;
  },

  setLevel: function(level) {
    this.level_ = level;
  },

  addAppender: function(appender) {
    if (!this.appenders_) this.appenders_ = this.parent.appenders.slice(0)
    this.appenders_.push(appender)
  },

  removeAppender: function(appender) {
    if (!this.appenders_) this.appenders_ = this.parent.appenders.slice(0)
    var index = this.appenders_.indexOf(appender);
    if (index >= 0) this.appenders_.splice(index, 1);
  },

  clearAppenders: function() {
    if (!this.appenders_) 
      this.appenders_ = [];
    else
      this.appenders_.splice(0, this.appenders_.length);
  }

};

var ConsoleAppender = exports.ConsoleAppender = function(name, level, time, message) {
  console.log(format('%t - %s [%s]: %s', [time, name, level.name, message]));
};

var format = exports.format = function(format, data) {
  return format.replace(/%([sxdtjeof])/g, function(_, type) {
    var value = data.shift();
    switch (type) {
      case 's':
        if (value === undefined) return 'undefined'
        if (value === null) return 'null';
        return value.toString();
      case 'x':
        // Hex display of string
        if (value === undefined || value === null) return ''
        return value.toString().split('').map(function (c) { return c.charCodeAt(0).toString(16) }).join(' ')
      case 'd':
        value = parseInt(value, 10);
        if (isNaN(value)) return 'NaN'
        return value.toFixed(0);
      case 't': // time
        return format_date(value);
      case 'j':
        return JSON.stringify(value);
      case 'e':
        if (!value) return '';
        return value.message + "\n" + (Array.isArray(value.stack) ? value.stack.join("\n\t") : value.stack);
      case 'o':
        return '\n\t' + sys.inspect(value, false, null).split(/\n/).join('\n\t');
      case 'f':
        return '\n\t' + value.toString().replace(/\r?\n/g, '\n\t')
    }
    throw new Error('Invalid format in: ' + format);
  });
};

/*
 * Internal state
 */

var Root = new Logger('', { level:INFO, appenders:[ConsoleAppender] }),
    loggers = {};

exports.setLevel       = Root.setLevel.bind(Root)
exports.addAppender    = Root.addAppender.bind(Root)
exports.removeAppender = Root.removeAppender.bind(Root)
exports.clearAppenders = Root.clearAppenders.bind(Root)

/*
 * Internal methods
 */

var log = function(logger, level, args_) {
  var time = new Date(),
      args = Array.prototype.slice.call(args_, 0),
      format_ = args.shift();

  if (logger.prefix) {
    if (typeof(logger.prefix.format) === 'function') {
      var current = logger.prefix.format.apply(logger);
      if (Array.isArray(current)) {
        format_ = current.shift() + format_
        args = current.concat(args)
      } else {
        format_ = current + format_
      }
    } else {
      format_ = logger.prefix.format + format_
      args = (logger.prefix.args || []).concat(args)
    }
  }

  logger.appenders.forEach(function(appender) {
    appender(logger.name, level, time, format(format_, args));
  });
}

var pad2 = function(n) {
  return n < 10 ? '0' + n : n;
}

var pad3 = function(n) {
  return n < 100 ? (n < 10 ? '00' + n : '0' + n) : n;
}

function format_date(date) {
  return date.getUTCFullYear()+'-'
    + pad2(date.getUTCMonth()+1)+'-'
    + pad2(date.getUTCDate())+' '
    + pad2(date.getUTCHours())+':'
    + pad2(date.getUTCMinutes())+':'
    + pad2(date.getUTCSeconds())+'.'
    + pad3(date.getUTCMilliseconds()) 
}
