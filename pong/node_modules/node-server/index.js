var argsparser    = require('argsparser')
  , path          = require('path')
  , fs            = require('fs')
  , daemon        = require('daemon')
  , child_process = require('child_process')
  , EventEmitter  = require('events').EventEmitter
  , Logger        = require('node-logger')
  , logger        = Logger.logger('node-server');

/**
 * Setup a server using the name and supplied root
 */
exports.server = function(started) {

  var args    = argsparser.parse()
    , nodeArg = args.node
    , script  = Array.isArray(nodeArg) ? nodeArg[0] : nodeArg
    , name    = path.basename(script, '.js')
    , root    = path.dirname(script)
    , logfile = path.join(root, name + '.log')
    , pidfile = path.join(root, name + '.pid')
    , action  = Array.isArray(nodeArg) ? nodeArg[1] : "start";

  var config = args;
  delete config.node;

  var start = function(foreground, emitter) {
    getPid(pidfile, function(err, pid) {
      if (err) {
        emitter.emit('error', wrapError(err, 'Failed reading PID file'));
      } else if (pid) {
        emitter.emit('error', wrapError(err, '%s is already running at PID %d', name, pid));
      } else {
        emitter.emit('starting');
        if (foreground) {
          emitter.emit('started', process.pid);
        } else {
          daemon.daemonize(logfile, pidfile, function(err, pid) {
            if (err) {
              emitter.emit('error', wrapError(err, 'Failed starting %s:', name));
            } else {
              emitter.emit('started', pid);
            }
          });
        }
      }
    });
  };

  var stop = function(emitter) {
    getPid(pidfile, function(err, pid) {
      if (err) {
        emitter.emit('error', wrapError(err, 'Failed reading PID file'));
      } else if (pid) {
        emitter.emit('killing', pid);
        try {
          process.kill(parseInt(pid, 10), 'SIGTERM');
        } catch (err) {
          if (err.code === 'ESRCH') {
            // Already killed, ignore error
            emitter.emit('already_killed');
          } else {
            return emitter.emit('error', wrapError(err, 'Failed killing %s with PID %s', name, pid));
          }
        }
        emitter.emit('remove_pid');
        fs.unlink(pidfile, function(err) {
          if (err) {
            emitter.emit('error', wrapError(err, 'Failed removing PID file after killing process'));
          } else {
            emitter.emit('killed', true);
          }
        });
      } else {
        emitter.emit('killed', false);
      }
    });

  };

  var json       = config['--json']
    , foreground = config['--foreground'] || config['-f']
    , emitter    = new EventEmitter();

  switch (action) {
    case "start":
      if (json) {
        emitter.on('error', function(err) {
          console.log('{ "error": "%s" }', err.message);
        });
        // Output succes already in starting otherwise the stdout is redirected to the logfile
        emitter.on('starting', function() {
          console.log('{ "starting": true, "name": "%s", "root": "%s", "config": %s }',
            name, root, JSON.stringify(config));
        });
      } else {
        emitter.on('error', function(err) {
          logger.error('Failed to start server: %e', err);
        });
        emitter.on('starting', function() {
          logger.info('Starting %s in %s', name, root);
        });
      }
      // Alway log after started since stdout is redirected here already
      emitter.on('started', function(pid) {
        logger.info('%s started with PID %s', name, pid);
      });
      emitter.on('error', function() { process.exit(1); });
      emitter.on('started', function(pid) {
        started(config, pid);
      });
      start(foreground, emitter);
      break;
    case "stop":
      if (json) {
        emitter.on('error', function(err) {
          console.log('{ "error": "%s" }', err.message);
        });
        emitter.on('killed', function(stopped) {
          if (stopped) {
            console.log('{ "status": "Stopped" }');
          } else {
            console.log('{ "status": "Stopped", "note": "Not running" }');
          }
        });

      } else {
        emitter.on('error', function(err) {
          logger.error('Failed to stop server: %e', err);
        });
        emitter.on('killing', function(pid) {
          logger.info('Killing %s running with PID %s', name, pid);
        });
        emitter.on('remove_pid', function() {
          logger.debug('Remove pid file for %s at %s', name, pidfile);
        });
        emitter.on('already_killed', function() {
          logger.debug('%s already killed (got ESRCH)', name);
        });
        emitter.on('killed', function(stopped) {
          if (stopped) {
            logger.info('Stopped %s', name);
          } else {
            logger.info('%s not running', name);
          }
        });
      }
      emitter.on('error', function() { process.exit(1); });
      emitter.on('killed', function(stopped) {
        process.exit(0);
      });
      stop(emitter);
      break;
    case "restart":
      if (json) {
        emitter.on('error', function(err) {
          console.log('{ "error": "%s" }', err.message);
        });
        emitter.on('starting', function() {
          console.log('{ "status": "Restarted" }');
        });
      } else {
        emitter.on('error', function(err) {
          logger.error('Failed to restart server: %e', err);
        });
        emitter.on('starting', function() {
          logger.info('Restarting %s in %s', name, root);
        });
        emitter.on('started', function(pid) {
          logger.info('%s restarted with PID %s', name, pid);
        });
      }
      emitter.on('error', function() { process.exit(1); });
      emitter.on('killed', function() {
        start(foreground, emitter);
      });
      emitter.on('started', function(pid) {
        started(config, pid);
      });
      stop(emitter);
      break;
    case "status":
      getPid(pidfile, function(err, pid) {
        if (err) {
          if (json) {
            console.log('{ "error": "Failed reading PID file", "status": "Unknown", "name": "%s" }', name);
          } else {
            logger.error('Failed reading PID file');
          }
          process.exit(1);
        } else if (pid) {
          if (json) {
            console.log('{ "status": "Running", "pid": %d, "name": "%s" }', pid, name);
          } else {
            logger.info('%s is running at PID %d', name, pid);
          }
        } else {
          if (json) {
            console.log('{ "status": "Stopped", "name": "%s" }', name);
          } else {
            logger.info('%s is not running', name);
          }
        }
        process.exit(0);
      });
      break;
    case "prune":
      fs.unlink(pidfile, function(err) {
        // Ignore errors
        if (json) {
          console.log('{ "status": "Pruned", "pidfile": "%s" }', pidfile);
        } else {
          logger.info('Pruned pidfile "%s"', pidfile);
        }
        process.exit(0);
      });
      break;
    default:
      if (!json) {
        console.error('Usage: node %s [start|stop|restart|status|prune]', name);
      }
      process.exit(1);
  }

};

/**
 * Export methods to be used by someone controlling a server specified above
 */

exports.status = function(server, args, cb) {
  invoke(server, ['status', '--json'], args, cb);
};

exports.start = function(server, args, cb) {
  invoke(server, ['start', '--json'], args, cb);
};

exports.stop = function(server, args, cb) {
  invoke(server, ['stop', '--json'], args, cb);
};

exports.restart = function(server, args, cb) {
  invoke(server, ['restart', '--json'], args, cb);
};

exports.prune = function(server, args, cb) {
  invoke(server, ['prune', '--json'], args, cb);
};

//
// Utility methods
//

var getPid = function(pidfile, cb) {
  fs.stat(pidfile, function(err, status) {
    if (err) {
      if (err.code === 'ENOENT') {
        // Missing file, return success without pid
        cb(null, null);
      } else {
        cb(err);
      }
      return;
    }
    if (status && status.isFile()) {
      fs.readFile(pidfile, 'ascii', function(err, data) {
        if (err) return cb(err);
        cb(null, parseInt(data, 10));
      });
    } else {
      cb(null, null);
    }
  });
};

var wrapError = function(err, message, args) {
  if (typeof err === 'string') {
    message = err;
    err = null;
    args = Array.prototype.slice.apply(arguments, [1]);
  } else {
    args = Array.prototype.slice.apply(arguments, [2]);
  }
  var result = new Error(Logger.format(message, args));
  if (err) result.rootCause = err;
  return result;
};

var invoke = function(server, command, args, cb) {
  if (typeof args === 'function') {
    cb = args;
    args = [];
  }

  args = command.concat(args || []);

  child_process.execFile(process.argv[0], [server].concat(args), function(err, stdout, stderr) {
    if (err) return cb(err);
    cb(null, JSON.parse(stdout));
  });
};

if (!module.parent) {
  // exports.server(function(err, config) {
  //   console.log('Got config: ', config);
  // });

  exports.status('../node-expenses/server.js', function(err, status) {
    if (err) return console.error('Failed to check status:', err);
    console.log('Got status: ', status);
  });

}
